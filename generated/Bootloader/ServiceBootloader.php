<?php

declare(strict_types=1);

namespace GRPC\Bootloader;

use GRPC\Config\GRPCServicesConfig;
use GRPC\cart\CartGrpcClient;
use GRPC\cart\CartGrpcInterface;
use GRPC\category\CategoryGrpcClient;
use GRPC\category\CategoryGrpcInterface;
use GRPC\comment\CommentGrpcClient;
use GRPC\comment\CommentGrpcInterface;
use GRPC\order\OrderGrpcClient;
use GRPC\order\OrderGrpcInterface;
use GRPC\product\ProductGrpcClient;
use GRPC\product\ProductGrpcInterface;
use GRPC\user\UserGrpcClient;
use GRPC\user\UserGrpcInterface;
use Spiral\Boot\Bootloader\Bootloader;
use Spiral\Boot\EnvironmentInterface;
use Spiral\Config\ConfiguratorInterface;
use Spiral\Core\Container;
use Spiral\Core\InterceptableCore;
use Spiral\RoadRunnerBridge\GRPC\Interceptor\ServiceClientCore;

class ServiceBootloader extends Bootloader
{
    public function __construct(
        private readonly ConfiguratorInterface $config,
    ) {
    }

    public function init(EnvironmentInterface $env): void
    {
        $this->initConfig($env);
    }

    public function boot(Container $container): void
    {
        $this->initServices($container);
    }

    /**
     * Don't edit this method manually, it is generated by GRPC services generator.
     */
    private function initConfig(EnvironmentInterface $env): void
    {
        $this->config->setDefaults(
            GRPCServicesConfig::CONFIG,
            [
                'services' => [
                    CartGrpcClient::class => ['host' => $env->get('CART_GRPC_HOST', '127.0.0.1:9000')],
                    CategoryGrpcClient::class => ['host' => $env->get('CATEGORY_GRPC_HOST', '127.0.0.1:9001')],
                    CommentGrpcClient::class => ['host' => $env->get('COMMENT_GRPC_HOST', '127.0.0.1:9002')],
                    OrderGrpcClient::class => ['host' => $env->get('ORDER_GRPC_HOST', '127.0.0.1:9003')],
                    ProductGrpcClient::class => ['host' => $env->get('PRODUCT_GRPC_HOST', '127.0.0.1:9004')],
                    UserGrpcClient::class => ['host' => $env->get('USER_GRPC_HOST', '127.0.0.1:9005')],
                    CartGrpcClient::class => ['host' => $env->get('CART_GRPC_HOST', '127.0.0.1:9006')],
                    CategoryGrpcClient::class => ['host' => $env->get('CATEGORY_GRPC_HOST', '127.0.0.1:9007')],
                    CommentGrpcClient::class => ['host' => $env->get('COMMENT_GRPC_HOST', '127.0.0.1:9008')],
                    OrderGrpcClient::class => ['host' => $env->get('ORDER_GRPC_HOST', '127.0.0.1:9009')],
                    ProductGrpcClient::class => ['host' => $env->get('PRODUCT_GRPC_HOST', '127.0.0.1:9010')],
                    UserGrpcClient::class => ['host' => $env->get('USER_GRPC_HOST', '127.0.0.1:9011')],
                    CartGrpcClient::class => ['host' => $env->get('CART_GRPC_HOST', '127.0.0.1:9012')],
                    CategoryGrpcClient::class => ['host' => $env->get('CATEGORY_GRPC_HOST', '127.0.0.1:9013')],
                    CommentGrpcClient::class => ['host' => $env->get('COMMENT_GRPC_HOST', '127.0.0.1:9014')],
                    OrderGrpcClient::class => ['host' => $env->get('ORDER_GRPC_HOST', '127.0.0.1:9015')],
                    ProductGrpcClient::class => ['host' => $env->get('PRODUCT_GRPC_HOST', '127.0.0.1:9016')],
                    UserGrpcClient::class => ['host' => $env->get('USER_GRPC_HOST', '127.0.0.1:9017')],
                    CartGrpcClient::class => ['host' => $env->get('CART_GRPC_HOST', '127.0.0.1:9018')],
                    CategoryGrpcClient::class => ['host' => $env->get('CATEGORY_GRPC_HOST', '127.0.0.1:9019')],
                    CommentGrpcClient::class => ['host' => $env->get('COMMENT_GRPC_HOST', '127.0.0.1:9020')],
                    OrderGrpcClient::class => ['host' => $env->get('ORDER_GRPC_HOST', '127.0.0.1:9021')],
                    ProductGrpcClient::class => ['host' => $env->get('PRODUCT_GRPC_HOST', '127.0.0.1:9022')],
                    UserGrpcClient::class => ['host' => $env->get('USER_GRPC_HOST', '127.0.0.1:9023')],
                    CartGrpcClient::class => ['host' => $env->get('CART_GRPC_HOST', '127.0.0.1:9024')],
                    CategoryGrpcClient::class => ['host' => $env->get('CATEGORY_GRPC_HOST', '127.0.0.1:9025')],
                    CommentGrpcClient::class => ['host' => $env->get('COMMENT_GRPC_HOST', '127.0.0.1:9026')],
                    OrderGrpcClient::class => ['host' => $env->get('ORDER_GRPC_HOST', '127.0.0.1:9027')],
                    ProductGrpcClient::class => ['host' => $env->get('PRODUCT_GRPC_HOST', '127.0.0.1:9028')],
                    UserGrpcClient::class => ['host' => $env->get('USER_GRPC_HOST', '127.0.0.1:9029')],
                    CartGrpcClient::class => ['host' => $env->get('CART_GRPC_HOST', '127.0.0.1:9030')],
                    CategoryGrpcClient::class => ['host' => $env->get('CATEGORY_GRPC_HOST', '127.0.0.1:9031')],
                    CommentGrpcClient::class => ['host' => $env->get('COMMENT_GRPC_HOST', '127.0.0.1:9032')],
                    OrderGrpcClient::class => ['host' => $env->get('ORDER_GRPC_HOST', '127.0.0.1:9033')],
                    ProductGrpcClient::class => ['host' => $env->get('PRODUCT_GRPC_HOST', '127.0.0.1:9034')],
                    UserGrpcClient::class => ['host' => $env->get('USER_GRPC_HOST', '127.0.0.1:9035')],
                ],
            ]
        );
    }

    /**
     * Don't edit this method manually, it is generated by GRPC services generator.
     */
    private function initServices(Container $container): void
    {
        $container->bindSingleton(
            CartGrpcInterface::class,
            static function(GRPCServicesConfig $config) use($container): CartGrpcInterface
            {
                $service = $config->getService(CartGrpcClient::class);
                $core = new InterceptableCore(new ServiceClientCore(
                    $service['host'],
                    ['credentials' => $service['credentials'] ?? $config->getDefaultCredentials()]
                ));

                foreach ($config->getInterceptors() as $interceptor) {
                    $core->addInterceptor($container->get($interceptor));
                }

                return $container->make(CartGrpcClient::class, ['core' => $core]);
            }
        );
        $container->bindSingleton(
            CategoryGrpcInterface::class,
            static function(GRPCServicesConfig $config) use($container): CategoryGrpcInterface
            {
                $service = $config->getService(CategoryGrpcClient::class);
                $core = new InterceptableCore(new ServiceClientCore(
                    $service['host'],
                    ['credentials' => $service['credentials'] ?? $config->getDefaultCredentials()]
                ));

                foreach ($config->getInterceptors() as $interceptor) {
                    $core->addInterceptor($container->get($interceptor));
                }

                return $container->make(CategoryGrpcClient::class, ['core' => $core]);
            }
        );
        $container->bindSingleton(
            CommentGrpcInterface::class,
            static function(GRPCServicesConfig $config) use($container): CommentGrpcInterface
            {
                $service = $config->getService(CommentGrpcClient::class);
                $core = new InterceptableCore(new ServiceClientCore(
                    $service['host'],
                    ['credentials' => $service['credentials'] ?? $config->getDefaultCredentials()]
                ));

                foreach ($config->getInterceptors() as $interceptor) {
                    $core->addInterceptor($container->get($interceptor));
                }

                return $container->make(CommentGrpcClient::class, ['core' => $core]);
            }
        );
        $container->bindSingleton(
            OrderGrpcInterface::class,
            static function(GRPCServicesConfig $config) use($container): OrderGrpcInterface
            {
                $service = $config->getService(OrderGrpcClient::class);
                $core = new InterceptableCore(new ServiceClientCore(
                    $service['host'],
                    ['credentials' => $service['credentials'] ?? $config->getDefaultCredentials()]
                ));

                foreach ($config->getInterceptors() as $interceptor) {
                    $core->addInterceptor($container->get($interceptor));
                }

                return $container->make(OrderGrpcClient::class, ['core' => $core]);
            }
        );
        $container->bindSingleton(
            ProductGrpcInterface::class,
            static function(GRPCServicesConfig $config) use($container): ProductGrpcInterface
            {
                $service = $config->getService(ProductGrpcClient::class);
                $core = new InterceptableCore(new ServiceClientCore(
                    $service['host'],
                    ['credentials' => $service['credentials'] ?? $config->getDefaultCredentials()]
                ));

                foreach ($config->getInterceptors() as $interceptor) {
                    $core->addInterceptor($container->get($interceptor));
                }

                return $container->make(ProductGrpcClient::class, ['core' => $core]);
            }
        );
        $container->bindSingleton(
            UserGrpcInterface::class,
            static function(GRPCServicesConfig $config) use($container): UserGrpcInterface
            {
                $service = $config->getService(UserGrpcClient::class);
                $core = new InterceptableCore(new ServiceClientCore(
                    $service['host'],
                    ['credentials' => $service['credentials'] ?? $config->getDefaultCredentials()]
                ));

                foreach ($config->getInterceptors() as $interceptor) {
                    $core->addInterceptor($container->get($interceptor));
                }

                return $container->make(UserGrpcClient::class, ['core' => $core]);
            }
        );
        $container->bindSingleton(
            CartGrpcInterface::class,
            static function(GRPCServicesConfig $config) use($container): CartGrpcInterface
            {
                $service = $config->getService(CartGrpcClient::class);
                $core = new InterceptableCore(new ServiceClientCore(
                    $service['host'],
                    ['credentials' => $service['credentials'] ?? $config->getDefaultCredentials()]
                ));

                foreach ($config->getInterceptors() as $interceptor) {
                    $core->addInterceptor($container->get($interceptor));
                }

                return $container->make(CartGrpcClient::class, ['core' => $core]);
            }
        );
        $container->bindSingleton(
            CategoryGrpcInterface::class,
            static function(GRPCServicesConfig $config) use($container): CategoryGrpcInterface
            {
                $service = $config->getService(CategoryGrpcClient::class);
                $core = new InterceptableCore(new ServiceClientCore(
                    $service['host'],
                    ['credentials' => $service['credentials'] ?? $config->getDefaultCredentials()]
                ));

                foreach ($config->getInterceptors() as $interceptor) {
                    $core->addInterceptor($container->get($interceptor));
                }

                return $container->make(CategoryGrpcClient::class, ['core' => $core]);
            }
        );
        $container->bindSingleton(
            CommentGrpcInterface::class,
            static function(GRPCServicesConfig $config) use($container): CommentGrpcInterface
            {
                $service = $config->getService(CommentGrpcClient::class);
                $core = new InterceptableCore(new ServiceClientCore(
                    $service['host'],
                    ['credentials' => $service['credentials'] ?? $config->getDefaultCredentials()]
                ));

                foreach ($config->getInterceptors() as $interceptor) {
                    $core->addInterceptor($container->get($interceptor));
                }

                return $container->make(CommentGrpcClient::class, ['core' => $core]);
            }
        );
        $container->bindSingleton(
            OrderGrpcInterface::class,
            static function(GRPCServicesConfig $config) use($container): OrderGrpcInterface
            {
                $service = $config->getService(OrderGrpcClient::class);
                $core = new InterceptableCore(new ServiceClientCore(
                    $service['host'],
                    ['credentials' => $service['credentials'] ?? $config->getDefaultCredentials()]
                ));

                foreach ($config->getInterceptors() as $interceptor) {
                    $core->addInterceptor($container->get($interceptor));
                }

                return $container->make(OrderGrpcClient::class, ['core' => $core]);
            }
        );
        $container->bindSingleton(
            ProductGrpcInterface::class,
            static function(GRPCServicesConfig $config) use($container): ProductGrpcInterface
            {
                $service = $config->getService(ProductGrpcClient::class);
                $core = new InterceptableCore(new ServiceClientCore(
                    $service['host'],
                    ['credentials' => $service['credentials'] ?? $config->getDefaultCredentials()]
                ));

                foreach ($config->getInterceptors() as $interceptor) {
                    $core->addInterceptor($container->get($interceptor));
                }

                return $container->make(ProductGrpcClient::class, ['core' => $core]);
            }
        );
        $container->bindSingleton(
            UserGrpcInterface::class,
            static function(GRPCServicesConfig $config) use($container): UserGrpcInterface
            {
                $service = $config->getService(UserGrpcClient::class);
                $core = new InterceptableCore(new ServiceClientCore(
                    $service['host'],
                    ['credentials' => $service['credentials'] ?? $config->getDefaultCredentials()]
                ));

                foreach ($config->getInterceptors() as $interceptor) {
                    $core->addInterceptor($container->get($interceptor));
                }

                return $container->make(UserGrpcClient::class, ['core' => $core]);
            }
        );
        $container->bindSingleton(
            CartGrpcInterface::class,
            static function(GRPCServicesConfig $config) use($container): CartGrpcInterface
            {
                $service = $config->getService(CartGrpcClient::class);
                $core = new InterceptableCore(new ServiceClientCore(
                    $service['host'],
                    ['credentials' => $service['credentials'] ?? $config->getDefaultCredentials()]
                ));

                foreach ($config->getInterceptors() as $interceptor) {
                    $core->addInterceptor($container->get($interceptor));
                }

                return $container->make(CartGrpcClient::class, ['core' => $core]);
            }
        );
        $container->bindSingleton(
            CategoryGrpcInterface::class,
            static function(GRPCServicesConfig $config) use($container): CategoryGrpcInterface
            {
                $service = $config->getService(CategoryGrpcClient::class);
                $core = new InterceptableCore(new ServiceClientCore(
                    $service['host'],
                    ['credentials' => $service['credentials'] ?? $config->getDefaultCredentials()]
                ));

                foreach ($config->getInterceptors() as $interceptor) {
                    $core->addInterceptor($container->get($interceptor));
                }

                return $container->make(CategoryGrpcClient::class, ['core' => $core]);
            }
        );
        $container->bindSingleton(
            CommentGrpcInterface::class,
            static function(GRPCServicesConfig $config) use($container): CommentGrpcInterface
            {
                $service = $config->getService(CommentGrpcClient::class);
                $core = new InterceptableCore(new ServiceClientCore(
                    $service['host'],
                    ['credentials' => $service['credentials'] ?? $config->getDefaultCredentials()]
                ));

                foreach ($config->getInterceptors() as $interceptor) {
                    $core->addInterceptor($container->get($interceptor));
                }

                return $container->make(CommentGrpcClient::class, ['core' => $core]);
            }
        );
        $container->bindSingleton(
            OrderGrpcInterface::class,
            static function(GRPCServicesConfig $config) use($container): OrderGrpcInterface
            {
                $service = $config->getService(OrderGrpcClient::class);
                $core = new InterceptableCore(new ServiceClientCore(
                    $service['host'],
                    ['credentials' => $service['credentials'] ?? $config->getDefaultCredentials()]
                ));

                foreach ($config->getInterceptors() as $interceptor) {
                    $core->addInterceptor($container->get($interceptor));
                }

                return $container->make(OrderGrpcClient::class, ['core' => $core]);
            }
        );
        $container->bindSingleton(
            ProductGrpcInterface::class,
            static function(GRPCServicesConfig $config) use($container): ProductGrpcInterface
            {
                $service = $config->getService(ProductGrpcClient::class);
                $core = new InterceptableCore(new ServiceClientCore(
                    $service['host'],
                    ['credentials' => $service['credentials'] ?? $config->getDefaultCredentials()]
                ));

                foreach ($config->getInterceptors() as $interceptor) {
                    $core->addInterceptor($container->get($interceptor));
                }

                return $container->make(ProductGrpcClient::class, ['core' => $core]);
            }
        );
        $container->bindSingleton(
            UserGrpcInterface::class,
            static function(GRPCServicesConfig $config) use($container): UserGrpcInterface
            {
                $service = $config->getService(UserGrpcClient::class);
                $core = new InterceptableCore(new ServiceClientCore(
                    $service['host'],
                    ['credentials' => $service['credentials'] ?? $config->getDefaultCredentials()]
                ));

                foreach ($config->getInterceptors() as $interceptor) {
                    $core->addInterceptor($container->get($interceptor));
                }

                return $container->make(UserGrpcClient::class, ['core' => $core]);
            }
        );
        $container->bindSingleton(
            CartGrpcInterface::class,
            static function(GRPCServicesConfig $config) use($container): CartGrpcInterface
            {
                $service = $config->getService(CartGrpcClient::class);
                $core = new InterceptableCore(new ServiceClientCore(
                    $service['host'],
                    ['credentials' => $service['credentials'] ?? $config->getDefaultCredentials()]
                ));

                foreach ($config->getInterceptors() as $interceptor) {
                    $core->addInterceptor($container->get($interceptor));
                }

                return $container->make(CartGrpcClient::class, ['core' => $core]);
            }
        );
        $container->bindSingleton(
            CategoryGrpcInterface::class,
            static function(GRPCServicesConfig $config) use($container): CategoryGrpcInterface
            {
                $service = $config->getService(CategoryGrpcClient::class);
                $core = new InterceptableCore(new ServiceClientCore(
                    $service['host'],
                    ['credentials' => $service['credentials'] ?? $config->getDefaultCredentials()]
                ));

                foreach ($config->getInterceptors() as $interceptor) {
                    $core->addInterceptor($container->get($interceptor));
                }

                return $container->make(CategoryGrpcClient::class, ['core' => $core]);
            }
        );
        $container->bindSingleton(
            CommentGrpcInterface::class,
            static function(GRPCServicesConfig $config) use($container): CommentGrpcInterface
            {
                $service = $config->getService(CommentGrpcClient::class);
                $core = new InterceptableCore(new ServiceClientCore(
                    $service['host'],
                    ['credentials' => $service['credentials'] ?? $config->getDefaultCredentials()]
                ));

                foreach ($config->getInterceptors() as $interceptor) {
                    $core->addInterceptor($container->get($interceptor));
                }

                return $container->make(CommentGrpcClient::class, ['core' => $core]);
            }
        );
        $container->bindSingleton(
            OrderGrpcInterface::class,
            static function(GRPCServicesConfig $config) use($container): OrderGrpcInterface
            {
                $service = $config->getService(OrderGrpcClient::class);
                $core = new InterceptableCore(new ServiceClientCore(
                    $service['host'],
                    ['credentials' => $service['credentials'] ?? $config->getDefaultCredentials()]
                ));

                foreach ($config->getInterceptors() as $interceptor) {
                    $core->addInterceptor($container->get($interceptor));
                }

                return $container->make(OrderGrpcClient::class, ['core' => $core]);
            }
        );
        $container->bindSingleton(
            ProductGrpcInterface::class,
            static function(GRPCServicesConfig $config) use($container): ProductGrpcInterface
            {
                $service = $config->getService(ProductGrpcClient::class);
                $core = new InterceptableCore(new ServiceClientCore(
                    $service['host'],
                    ['credentials' => $service['credentials'] ?? $config->getDefaultCredentials()]
                ));

                foreach ($config->getInterceptors() as $interceptor) {
                    $core->addInterceptor($container->get($interceptor));
                }

                return $container->make(ProductGrpcClient::class, ['core' => $core]);
            }
        );
        $container->bindSingleton(
            UserGrpcInterface::class,
            static function(GRPCServicesConfig $config) use($container): UserGrpcInterface
            {
                $service = $config->getService(UserGrpcClient::class);
                $core = new InterceptableCore(new ServiceClientCore(
                    $service['host'],
                    ['credentials' => $service['credentials'] ?? $config->getDefaultCredentials()]
                ));

                foreach ($config->getInterceptors() as $interceptor) {
                    $core->addInterceptor($container->get($interceptor));
                }

                return $container->make(UserGrpcClient::class, ['core' => $core]);
            }
        );
        $container->bindSingleton(
            CartGrpcInterface::class,
            static function(GRPCServicesConfig $config) use($container): CartGrpcInterface
            {
                $service = $config->getService(CartGrpcClient::class);
                $core = new InterceptableCore(new ServiceClientCore(
                    $service['host'],
                    ['credentials' => $service['credentials'] ?? $config->getDefaultCredentials()]
                ));

                foreach ($config->getInterceptors() as $interceptor) {
                    $core->addInterceptor($container->get($interceptor));
                }

                return $container->make(CartGrpcClient::class, ['core' => $core]);
            }
        );
        $container->bindSingleton(
            CategoryGrpcInterface::class,
            static function(GRPCServicesConfig $config) use($container): CategoryGrpcInterface
            {
                $service = $config->getService(CategoryGrpcClient::class);
                $core = new InterceptableCore(new ServiceClientCore(
                    $service['host'],
                    ['credentials' => $service['credentials'] ?? $config->getDefaultCredentials()]
                ));

                foreach ($config->getInterceptors() as $interceptor) {
                    $core->addInterceptor($container->get($interceptor));
                }

                return $container->make(CategoryGrpcClient::class, ['core' => $core]);
            }
        );
        $container->bindSingleton(
            CommentGrpcInterface::class,
            static function(GRPCServicesConfig $config) use($container): CommentGrpcInterface
            {
                $service = $config->getService(CommentGrpcClient::class);
                $core = new InterceptableCore(new ServiceClientCore(
                    $service['host'],
                    ['credentials' => $service['credentials'] ?? $config->getDefaultCredentials()]
                ));

                foreach ($config->getInterceptors() as $interceptor) {
                    $core->addInterceptor($container->get($interceptor));
                }

                return $container->make(CommentGrpcClient::class, ['core' => $core]);
            }
        );
        $container->bindSingleton(
            OrderGrpcInterface::class,
            static function(GRPCServicesConfig $config) use($container): OrderGrpcInterface
            {
                $service = $config->getService(OrderGrpcClient::class);
                $core = new InterceptableCore(new ServiceClientCore(
                    $service['host'],
                    ['credentials' => $service['credentials'] ?? $config->getDefaultCredentials()]
                ));

                foreach ($config->getInterceptors() as $interceptor) {
                    $core->addInterceptor($container->get($interceptor));
                }

                return $container->make(OrderGrpcClient::class, ['core' => $core]);
            }
        );
        $container->bindSingleton(
            ProductGrpcInterface::class,
            static function(GRPCServicesConfig $config) use($container): ProductGrpcInterface
            {
                $service = $config->getService(ProductGrpcClient::class);
                $core = new InterceptableCore(new ServiceClientCore(
                    $service['host'],
                    ['credentials' => $service['credentials'] ?? $config->getDefaultCredentials()]
                ));

                foreach ($config->getInterceptors() as $interceptor) {
                    $core->addInterceptor($container->get($interceptor));
                }

                return $container->make(ProductGrpcClient::class, ['core' => $core]);
            }
        );
        $container->bindSingleton(
            UserGrpcInterface::class,
            static function(GRPCServicesConfig $config) use($container): UserGrpcInterface
            {
                $service = $config->getService(UserGrpcClient::class);
                $core = new InterceptableCore(new ServiceClientCore(
                    $service['host'],
                    ['credentials' => $service['credentials'] ?? $config->getDefaultCredentials()]
                ));

                foreach ($config->getInterceptors() as $interceptor) {
                    $core->addInterceptor($container->get($interceptor));
                }

                return $container->make(UserGrpcClient::class, ['core' => $core]);
            }
        );
        $container->bindSingleton(
            CartGrpcInterface::class,
            static function(GRPCServicesConfig $config) use($container): CartGrpcInterface
            {
                $service = $config->getService(CartGrpcClient::class);
                $core = new InterceptableCore(new ServiceClientCore(
                    $service['host'],
                    ['credentials' => $service['credentials'] ?? $config->getDefaultCredentials()]
                ));

                foreach ($config->getInterceptors() as $interceptor) {
                    $core->addInterceptor($container->get($interceptor));
                }

                return $container->make(CartGrpcClient::class, ['core' => $core]);
            }
        );
        $container->bindSingleton(
            CategoryGrpcInterface::class,
            static function(GRPCServicesConfig $config) use($container): CategoryGrpcInterface
            {
                $service = $config->getService(CategoryGrpcClient::class);
                $core = new InterceptableCore(new ServiceClientCore(
                    $service['host'],
                    ['credentials' => $service['credentials'] ?? $config->getDefaultCredentials()]
                ));

                foreach ($config->getInterceptors() as $interceptor) {
                    $core->addInterceptor($container->get($interceptor));
                }

                return $container->make(CategoryGrpcClient::class, ['core' => $core]);
            }
        );
        $container->bindSingleton(
            CommentGrpcInterface::class,
            static function(GRPCServicesConfig $config) use($container): CommentGrpcInterface
            {
                $service = $config->getService(CommentGrpcClient::class);
                $core = new InterceptableCore(new ServiceClientCore(
                    $service['host'],
                    ['credentials' => $service['credentials'] ?? $config->getDefaultCredentials()]
                ));

                foreach ($config->getInterceptors() as $interceptor) {
                    $core->addInterceptor($container->get($interceptor));
                }

                return $container->make(CommentGrpcClient::class, ['core' => $core]);
            }
        );
        $container->bindSingleton(
            OrderGrpcInterface::class,
            static function(GRPCServicesConfig $config) use($container): OrderGrpcInterface
            {
                $service = $config->getService(OrderGrpcClient::class);
                $core = new InterceptableCore(new ServiceClientCore(
                    $service['host'],
                    ['credentials' => $service['credentials'] ?? $config->getDefaultCredentials()]
                ));

                foreach ($config->getInterceptors() as $interceptor) {
                    $core->addInterceptor($container->get($interceptor));
                }

                return $container->make(OrderGrpcClient::class, ['core' => $core]);
            }
        );
        $container->bindSingleton(
            ProductGrpcInterface::class,
            static function(GRPCServicesConfig $config) use($container): ProductGrpcInterface
            {
                $service = $config->getService(ProductGrpcClient::class);
                $core = new InterceptableCore(new ServiceClientCore(
                    $service['host'],
                    ['credentials' => $service['credentials'] ?? $config->getDefaultCredentials()]
                ));

                foreach ($config->getInterceptors() as $interceptor) {
                    $core->addInterceptor($container->get($interceptor));
                }

                return $container->make(ProductGrpcClient::class, ['core' => $core]);
            }
        );
        $container->bindSingleton(
            UserGrpcInterface::class,
            static function(GRPCServicesConfig $config) use($container): UserGrpcInterface
            {
                $service = $config->getService(UserGrpcClient::class);
                $core = new InterceptableCore(new ServiceClientCore(
                    $service['host'],
                    ['credentials' => $service['credentials'] ?? $config->getDefaultCredentials()]
                ));

                foreach ($config->getInterceptors() as $interceptor) {
                    $core->addInterceptor($container->get($interceptor));
                }

                return $container->make(UserGrpcClient::class, ['core' => $core]);
            }
        );
    }
}
